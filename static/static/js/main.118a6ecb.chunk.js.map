{"version":3,"sources":["spotify/SpotifyLogo.js","spotify/PlayingAnimation.js","spotify/SpotifyNowPlaying.js","spotify/SpotifyRecentTracks.js","ColorModeSwitcher.js","index.js","spotify/SpotifyAPI.js"],"names":["SpotifyLogo","react_default","a","createElement","width","x","y","viewBox","style","enableBackground","fill","className","d","PlayingAnimation","Playing","Animation","keyframes","_templateObject","Object","taggedTemplateLiteral","styled","div","_templateObject2","SpotifyNowPlaying","props","_useState","useState","_useState2","slicedToArray","loading","setLoading","_useState3","_useState4","track","setTrack","useEffect","intervalId","setInterval","getNowPlayingItem","client_id","client_secret","refresh_token","then","clearInterval","chakra_ui_layout_esm","align","mb","chakra_ui_spinner_esm","size","speed","thickness","color","isPlaying","spacing","direction","spotify_SpotifyLogo","fontWeight","spotify_PlayingAnimation","p","borderRadius","borderWidth","position","chakra_ui_image_esm","src","albumImageUrl","alt","concat","title","artist","height","overflow","chakra_ui_tooltip_esm","label","alignSelf","hasArrow","href","songUrl","isExternal","fontSize","isTruncated","chakra_ui_progress_esm","colorScheme","value","progress_ms","duration_ms","SpotifyRecentTracks","tracks","setTracks","getRecentlyPlayedTracks","results","map","index","key","ColorModeSwitcher","_useColorMode","useColorMode","colorMode","toggleColorMode","setColorMode","mediaQuery","window","matchMedia","handleChange","matches","addEventListener","removeEventListener","chakra_ui_button_esm","assign","aria-label","variant","marginLeft","onClick","icon","fa","theme","extendTheme","fonts","heading","body","ReactDOM","render","StrictMode","chakra_ui_react_esm","textAlign","justifyContent","alignItems","minHeight","mx","mt","base","md","gap","overflowY","overflowX","spotify_SpotifyNowPlaying","spotify_SpotifyRecentTracks","document","getElementById","fetchTokens","_ref","_home_baoopn_Projects_spotify_playing_react_spotify_playing_Bao_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_home_baoopn_Projects_spotify_playing_react_spotify_playing_Bao_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","mark","_callee","response","wrap","_context","prev","next","fetch","sent","ok","Error","abrupt","json","stop","apply","this","arguments","getAccessToken","_ref2","_callee2","basic","_context2","Buffer","from","toString","method","headers","Authorization","Content-Type","querystring","stringify","grant_type","_x","_x2","_x3","getNowPlaying","_ref3","_callee3","_yield$fetchTokens","clientId","clientSecret","refreshToken","_yield$getAccessToken","access_token","_context3","getRecentlyPlayed","_ref4","_callee4","_yield$fetchTokens2","_yield$getAccessToken2","_context4","_getNowPlayingItem","_callee5","song","_context5","status","item","album","images","url","artists","_artist","name","join","is_playing","external_urls","spotify","t0","_getRecentlyPlayedTracks","_callee6","data","_context6","items","playedAt","played_at"],"mappings":"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","file":"static/js/main.118a6ecb.chunk.js","sourcesContent":["import React from 'react';\n\nconst SpotifyLogo = () => (\n    <svg width=\"20px\" x=\"0px\" y=\"0px\" viewBox=\"0 0 20 20\" style={{ enableBackground: \"new 0 0 20 20\" }}>\n        <g>\n            <g>\n                <g>\n                    <path fill=\"#1ED760\" className=\"st0\" d=\"M10,0C4.5,0,0,4.5,0,10c0,5.5,4.5,10,10,10c5.5,0,10-4.5,10-10C20,4.5,15.5,0,10,0z M14.6,14.4\n                        c-0.2,0.3-0.6,0.4-0.9,0.2c-2.3-1.4-5.3-1.8-8.8-1c-0.3,0.1-0.7-0.1-0.7-0.5c-0.1-0.3,0.1-0.7,0.5-0.7c3.8-0.9,7.1-0.5,9.7,1.1\n                        C14.7,13.7,14.8,14.1,14.6,14.4z M15.8,11.7c-0.2,0.4-0.7,0.5-1.1,0.3C12,10.3,8,9.8,4.8,10.8c-0.4,0.1-0.8-0.1-1-0.5\n                        c-0.1-0.4,0.1-0.8,0.5-1c3.6-1.1,8.1-0.6,11.2,1.3C15.9,10.9,16,11.3,15.8,11.7z M15.9,8.9C12.7,7,7.4,6.8,4.3,7.7\n                        c-0.5,0.1-1-0.1-1.2-0.6C3,6.6,3.3,6.1,3.8,5.9c3.5-1.1,9.4-0.9,13.1,1.3c0.4,0.3,0.6,0.8,0.3,1.3C16.9,9,16.4,9.1,15.9,8.9z\"/>\n                </g>\n            </g>\n        </g>\n    </svg>\n)\n\nexport default SpotifyLogo;\n","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\n\nconst PlayingAnimation = () => {\n    return(\n        <Playing>\n            <span />\n            <span />\n            <span />\n        </Playing>\n    )\n};\n\nexport default PlayingAnimation;\n\nconst Animation = keyframes`\n    10% {\n    transform: scaleY(0.3);\n  }\n\n  30% {\n    transform: scaleY(1);\n  }\n\n  60% {\n    transform: scaleY(0.5);\n  }\n\n  80% {\n    transform: scaleY(0.75);\n  }\n\n  100% {\n    transform: scaleY(0.5);\n  }\n`;\n\nconst Playing = styled.div`\n    position: relative;\n    display: flex;\n    justify-content: space-between;\n    width: 13px;\n    height: 13px;\n  \n    span {\n        width: 3px;\n        height: 100%;\n        background-color: #1ED760;\n        border-radius: 3px;\n        animation: ${Animation} 2.2s ease infinite alternate;\n        content: '';\n        transform-origin: bottom;\n\n        &:nth-of-type(2) {\n            animation-delay: -2.2s;\n        }\n    \n        &:nth-of-type(3) {\n            animation-delay: -3.7s;\n        }\n        \n    }\n`;","import React, { useEffect, useState } from \"react\";\nimport {\n  Box,\n  Stack,\n  Image,\n  Text,\n  Link,\n  Spinner,\n  Progress,\n  Tooltip,\n} from \"@chakra-ui/react\";\nimport getNowPlayingItem from \"./SpotifyAPI\";\nimport SpotifyLogo from \"./SpotifyLogo\";\nimport PlayingAnimation from \"./PlayingAnimation\";\nimport '../App.css';\n\n\nconst SpotifyNowPlaying = (props) => {\n  const [loading, setLoading] = useState(true);\n  const [track, setTrack] = useState({});\n\n  // useEffect hook to fetch the currently playing item at regular intervals\n  useEffect(() => {\n    // Set up an interval to fetch the currently playing item every 1000 milliseconds\n    const intervalId = setInterval(() => {\n      getNowPlayingItem(\n        props.client_id,\n        props.client_secret,\n        props.refresh_token\n      ).then((track) => {\n        // Update the track state with the fetched data\n        setTrack(track);\n        // Set loading state to false once data is fetched\n        setLoading(false);\n      });\n    }, 1000);\n\n  // Clean up function to clear the interval when the component unmounts or dependencies change\n  return () => clearInterval(intervalId);\n}, [props.client_id, props.client_secret, props.refresh_token]);\n\n  return (\n    <Box width=\"xs\">\n      {loading ?\n        <Stack align=\"center\" mb={8}>\n          <Spinner size=\"md\" speed=\"0.6s\" thickness=\"3\" color=\"gray.500\"/>\n        </Stack>\n        :\n        <Stack width=\"full\" mb={track.isPlaying ? 2 : 4} spacing={3}>\n          <Stack spacing={2} direction=\"row\" align=\"center\">\n            <SpotifyLogo/>\n            <Text fontWeight=\"semibold\">{track.isPlaying ? 'Now Playing' : 'Currently Offline'}</Text>\n            {track.isPlaying && <PlayingAnimation/>}\n          </Stack>\n          {track.isPlaying &&\n            <Box p={4} borderRadius=\"lg\" borderWidth={1}>\n              <Stack direction=\"column\" spacing={4} align=\"center\">\n                <Box position=\"relative\">\n                  <Image\n                    src={track.albumImageUrl}\n                    alt={`${track.title} by ${track.artist}`}\n                    width={64}\n                    height={64}\n                    borderRadius=\"50%\"\n                    className=\"rotating-disk\"\n                  />\n                  <div className=\"center-circle\"></div>\n                  <div className=\"smaller-white-circle\"></div>\n                </Box>\n                <Stack spacing={1} overflow={\"hidden\"} width=\"full\">\n                  <Tooltip label={track.title} alignSelf=\"self-start\" hasArrow>\n                    <Link href={track.songUrl} alignSelf=\"self-start\" isExternal>\n                      <Text\n                        fontWeight=\"semibold\"\n                        fontSize=\"x-large\"\n                        width=\"full\"\n                        isTruncated\n                        color=\"alph\"\n                      >\n                        {track.title}\n                      </Text>\n                    </Link>\n                  </Tooltip>\n                  <Tooltip label={track.artist} alignSelf=\"self-start\" hasArrow>\n                    <Text\n                      color=\"gray.500\"\n                      isTruncated\n                      alignSelf=\"self-start\"\n                    >\n                      {track.artist}\n                    </Text>\n                  </Tooltip>\n                  <Progress\n                    size=\"xs\"\n                    colorScheme=\"green\"\n                    borderRadius=\"md\"\n                    value={(track.progress_ms / track.duration_ms) * 100}\n                  />\n                </Stack>\n              </Stack>\n            </Box>\n          }\n        </Stack>\n      }\n    </Box>\n  )\n};\n\nexport default SpotifyNowPlaying;","import React, { useEffect, useState } from \"react\";\nimport {\n  Box,\n  Stack,\n  Image,\n  Text,\n  Link,\n  Spinner,\n  Tooltip,\n} from \"@chakra-ui/react\";\nimport { getRecentlyPlayedTracks } from \"./SpotifyAPI\";\nimport SpotifyLogo from \"./SpotifyLogo\";\n\nconst SpotifyRecentTracks = (props) => {\n  const [loading, setLoading] = useState(true);\n  const [tracks, setTracks] = useState([]);\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      getRecentlyPlayedTracks(\n        props.client_id,\n        props.client_secret,\n        props.refresh_token\n      ).then((results) => {\n        setTracks(results);\n        setLoading(false);\n      });\n    }, 2000);\n\n    return () => clearInterval(intervalId);\n  }, [props.client_id, props.client_secret, props.refresh_token]);\n\n  return (\n    <Box width=\"xs\">\n      {loading ?\n        <Stack align=\"center\" mb={8}>\n          <Spinner size=\"md\" speed=\"0.6s\" thickness=\"3\" color=\"gray.500\"/>\n        </Stack>\n        :\n        <Stack width=\"full\" spacing={3}>\n          <Stack spacing={2} direction=\"row\" align=\"center\">\n            <SpotifyLogo/>\n            <Text fontWeight=\"semibold\">Recently Played</Text>\n          </Stack>\n          {tracks.map((track, index) => (\n            <Box key={index} p={2} borderRadius=\"lg\" borderWidth={1}>\n              <Stack direction=\"row\" spacing={4} align=\"center\">\n                <Image\n                  alt={`${track.title} album art`}\n                  src={track.albumImageUrl}\n                  width={12}\n                  height={12}\n                  borderRadius=\"sm\"\n                />\n                <Stack spacing={0} overflow=\"hidden\">\n                  <Tooltip label={track.title} hasArrow>\n                    <Link href={track.songUrl} alignSelf=\"self-start\" isExternal>\n                      <Text\n                        fontWeight=\"semibold\"\n                        width=\"full\"\n                        isTruncated\n                        color=\"alph\"\n                      >\n                        {track.title}\n                      </Text>\n                    </Link>\n                  </Tooltip>\n                  <Tooltip label={track.artist} hasArrow>\n                    <Text\n                      color=\"gray.500\"\n                      isTruncated\n                      alignSelf=\"self-start\"\n                    >\n                      {track.artist}\n                    </Text>\n                  </Tooltip>\n                  <Text></Text>\n                </Stack>\n              </Stack>\n            </Box>\n          ))}\n        </Stack>\n      }\n    </Box>\n  )\n};\n\nexport default SpotifyRecentTracks;","import React, { useEffect } from 'react';\nimport { useColorMode, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport function ColorModeSwitcher(props) {\n  const { colorMode, toggleColorMode, setColorMode } = useColorMode();\n\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = () => {\n      setColorMode(mediaQuery.matches ? 'dark' : 'light');\n    };\n\n    // Set the initial color mode\n    handleChange();\n\n    // Add event listener\n    mediaQuery.addEventListener('change', handleChange);\n\n    // Clean up event listener on unmount\n    return () => {\n      mediaQuery.removeEventListener('change', handleChange);\n    };\n  }, [setColorMode]);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${colorMode === 'light' ? 'dark' : 'light'} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={colorMode === 'light' ? <FaMoon /> : <FaSun />}\n      {...props}\n    />\n  );\n}","import { ChakraProvider, extendTheme, Box, Flex, Text, Link } from '@chakra-ui/react';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport SpotifyNowPlaying from './spotify/SpotifyNowPlaying';\nimport SpotifyRecentTracks from './spotify/SpotifyRecentTracks';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\nimport '@fontsource/inter'; // Import Inter font\n// require('dotenv').config();\n\n// Extend the theme to include the Inter font\nconst theme = extendTheme({\n  fonts: {\n    heading: 'Inter, sans-serif',\n    body: 'Inter, sans-serif',\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider theme={theme}>\n      <Box textAlign=\"right\" p={3}>\n        <ColorModeSwitcher />\n      </Box>\n\n      <Flex direction=\"column\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"90vh\" mb={6}>\n        <Box textAlign=\"start\" mb={6} mx={12}>\n          <h1>Explore the tracks I'm listening to right now and check out my recent Spotify activity.</h1>\n          <Text mt={4}>\n            Discover more about me and my work on my personal page: <Link href=\"https://baoopn.com\" color=\"teal.500\" isExternal>baoopn.com</Link>.\n          </Text>\n        </Box>\n\n        <Flex direction={{ base: \"column\", md: \"row\" }} justifyContent=\"center\" alignItems=\"top\" gap={6} overflowY={{ base: \"auto\", md: \"hidden\" }} overflowX=\"auto\">\n          <SpotifyNowPlaying />\n          <SpotifyRecentTracks />\n        </Flex>\n      </Flex>\n\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);","import querystring from \"querystring\";\n\nconst NOW_PLAYING_ENDPOINT = `https://api.spotify.com/v1/me/player/currently-playing`;\nconst RECENTLY_PLAYED_ENDPOINT = `https://api.spotify.com/v1/me/player/recently-played?limit=5`;\nconst TOKEN_ENDPOINT = `https://accounts.spotify.com/api/token`;\nconst SECRETS_ENDPOINT = `/tokens`;\n\nconst fetchTokens = async () => {\n  const response = await fetch(SECRETS_ENDPOINT);\n  if (!response.ok) {\n    throw new Error('Failed to fetch tokens');\n  }\n  return response.json();\n};\n\nconst getAccessToken = async (client_id, client_secret, refresh_token) => {\n  const basic = Buffer.from(`${client_id}:${client_secret}`).toString(\"base64\");\n\n  const response = await fetch(TOKEN_ENDPOINT, {\n    method: \"POST\",\n    headers: {\n      Authorization: `Basic ${basic}`,\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n    body: querystring.stringify({\n      grant_type: \"refresh_token\",\n      refresh_token,\n    }),\n  });\n\n  return response.json();\n};\n\nexport const getNowPlaying = async () => {\n  const { clientId, clientSecret, refreshToken } = await fetchTokens();\n  const { access_token } = await getAccessToken(clientId, clientSecret, refreshToken);\n\n  return fetch(NOW_PLAYING_ENDPOINT, {\n    headers: {\n      Authorization: `Bearer ${access_token}`,\n    },\n  });\n};\n\nexport const getRecentlyPlayed = async () => {\n  const { clientId, clientSecret, refreshToken } = await fetchTokens();\n  const { access_token } = await getAccessToken(clientId, clientSecret, refreshToken);\n\n  return fetch(RECENTLY_PLAYED_ENDPOINT, {\n    headers: {\n      Authorization: `Bearer ${access_token}`,\n    },\n  });\n};\n\nexport default async function getNowPlayingItem() {\n  const response = await getNowPlaying();\n  if (response.status === 204 || response.status > 400) {\n    return false;\n  }\n\n  try {\n    const song = await response.json();\n    const albumImageUrl = song.item.album.images[0].url;\n    const artist = song.item.artists.map((_artist) => _artist.name).join(\", \");\n    const isPlaying = song.is_playing;\n    const songUrl = song.item.external_urls.spotify;\n    const title = song.item.name;\n    const progress_ms = song.progress_ms;\n    const duration_ms = song.item.duration_ms;\n\n    return {\n      albumImageUrl,\n      artist,\n      isPlaying,\n      songUrl,\n      title,\n      progress_ms,\n      duration_ms,\n    };\n  } catch (error) {\n    return false;\n  }\n  \n}\n\nexport async function getRecentlyPlayedTracks() {\n  const response = await getRecentlyPlayed();\n  if (response.status > 400) {\n    return false;\n  }\n\n  const data = await response.json();\n  return data.items.map(track => ({\n    albumImageUrl: track.track.album.images[0].url,\n    artist: track.track.artists.map(artist => artist.name).join(\", \"),\n    playedAt: track.played_at,\n    songUrl: track.track.external_urls.spotify,\n    title: track.track.name,\n  }));\n}"],"sourceRoot":""}